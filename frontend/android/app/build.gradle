import kotlin.Pair
import com.android.build.api.dsl.ApplicationProductFlavor

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "idea"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply from: "buildConfigs.gradle"

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

ext.setupApplication = { ApplicationProductFlavor flavor, buildConfigName ->
    var buildConfig = createBuildConfig(buildConfigName)
    flavor.applicationId buildConfig.applicationId
    flavor.manifestPlaceholders = [*:determineIcon(buildConfig)]

    setupResourceValues(buildConfigName, {
        String type, String name, String value -> flavor.resValue(type, name, value)
    })
}

ext.setupVariant = { variant, buildConfigName ->
    var buildConfig = createBuildConfig(buildConfigName)
    if (buildConfig.buildFeatures.excludeX86) {
        // Verify this using:
        // unzip -l frontend/build/app/outputs/apk/Bayern/debug/app-Bayern-debug.apk | grep x86
        // unzip -l frontend/build/app/outputs/apk/Nuernberg/debug/app-Nuernberg-debug.apk | grep x86
        variant.packaging.jniLibs.excludes.add('**/lib/x86**')
    }
    if (buildConfig.buildFeatures.excludeLocationPlayServices) {
        // Verify this by opening the APKs in Android Studio/IntelliJ. Then select all the .dex files.
        // Then see if there are files located at com.android.gms (Cursive files are not present, only referenced)
        variant.compileConfiguration.exclude group: 'com.google.android.gms', module: 'play-services-location'
        variant.runtimeConfiguration.exclude group: 'com.google.android.gms', module: 'play-services-location'
    }
}

android {
    compileSdkVersion 34

    kotlinOptions {
        jvmTarget=JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    flavorDimensions "dummy"
    productFlavors {
        Bayern { flavor ->
            flavor.getIsDefault().set(true)
            setupApplication(flavor, "bayern")
        }
        Nuernberg { flavor ->
            setupApplication(flavor, "nuernberg")
        }
        BayernFloss { flavor ->
            setupApplication(flavor, "bayern-floss")
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    signingConfigs {
        if (System.getenv()['KEYSTORE_PATH']) { // Signing with env variables (CI)
            println "Selected using env variables"
            release {
                storeFile file("file://" + System.getenv()['HOME'] + project.KEYSTORE_PATH)
                storePassword project.KEYSTORE_PASSWORD
                keyAlias project.KEYSTORE_KEY_ALIAS
                keyPassword project.KEYSTORE_KEY_PASSWORD
            }
        } else if (localProperties.containsKey("signing.keyAlias")) { // Signing with local.properties file (locally)
            println "Selected using localProps"
            localProps {
                keyAlias localProperties.getProperty('signing.keyAlias')
                keyPassword localProperties.getProperty('signing.keyPassword')
                storeFile file(localProperties.getProperty('signing.storeFile'))
                storePassword localProperties.getProperty('signing.storePassword')
            }
        } else {
            println "Selecting debug keystore"
        }
    }

    buildTypes {
        release {
            ndk {
                // Flutter does not support x86, so we exclude it in the following list: https://github.com/flutter/flutter/issues/9253
                abiFilters 'armeabi-v7a','arm64-v8a','x86_64'
            }

            if (project.hasProperty('KEYSTORE_PATH')) {
                signingConfig signingConfigs.release
            } else if ( localProperties.containsKey("signing.keyAlias")) {
                signingConfig signingConfigs.localProps
            } else {
                signingConfig signingConfigs.debug
            }


            // We need to configure proguard here because of some bug which occurred when adding flutter dependencies,
            // probably involving image-picker.
            // The workaround is from https://github.com/flutter/flutter/issues/58479.
            // Also have a look at https://github.com/ehrenamtskarte/ehrenamtskarte/issues/340
            // As of flutter_plugin_android_lifecycle 2.0.1, this should no longer be necessary.
            // Once upgrading to that version, we can remove the next line together with proguard-rules.pro.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    def buildConfigName = determineBuildConfigName()
    def buildConfig = createBuildConfig(buildConfigName)

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        if (project.hasProperty('VERSION_CODE')) {
            versionCode project.VERSION_CODE.toInteger()
            versionName project.VERSION_NAME
        }
    }

    androidComponents {
        onVariants(selector().withFlavor(new Pair("dummy", "Bayern")), { variant ->
            setupVariant(variant, "bayern")
        })
        onVariants(selector().withFlavor(new Pair("dummy", "Nuernberg")), { variant ->
            setupVariant(variant, "nuernberg")
        })
        onVariants(selector().withFlavor(new Pair("dummy", "BayernFloss")), { variant ->
            setupVariant(variant, "bayern-floss")
        })
    }
}

flutter {
    source '../..'
    target 'lib/main.dart'
}
