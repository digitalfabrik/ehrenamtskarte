def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply from: "buildConfigs.gradle"

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    flavorDimensions "dummy"
    productFlavors {
        Automatic {
            getIsDefault().set(true)
            // Automatically decides which build config to use based on project properties, dart defines or environment variables.
        }
        Bayern {
            // Forces the bayern build config
            def buildConfig = createBuildConfig("bayern")
            applicationId buildConfig.applicationId
            manifestPlaceholders = [*:determineIcon(buildConfig)]

            setupResourceValues("bayern", {
                String type, String name, String value -> resValue(type, name, value)
            })
        }
        Nuernberg {
            // Forces the nuernberg build config
            def buildConfig = createBuildConfig("nuernberg")
            applicationId buildConfig.applicationId

            manifestPlaceholders = [*:determineIcon(buildConfig)]

            setupResourceValues("nuernberg", {
                String type, String name, String value -> resValue(type, name, value)
            })
        }
    }


    lintOptions {
        disable 'InvalidPackage'
    }

    signingConfigs {
        if (localProperties.containsKey("signing.keyAlias")) {
            localProps {
                keyAlias localProperties.getProperty('signing.keyAlias')
                keyPassword localProperties.getProperty('signing.keyPassword')
                storeFile file(localProperties.getProperty('signing.storeFile'))
                storePassword localProperties.getProperty('signing.storePassword')
            }
        }
    }

    buildTypes {
        release {
            if (localProperties.containsKey("signing.keyAlias")) {
                signingConfig signingConfigs.localProps
            } else {
                signingConfig signingConfigs.debug
            }


            // We need to configure proguard here because of some bug which occurred when adding flutter dependencies,
            // probably involving image-picker.
            // The workaround is from https://github.com/flutter/flutter/issues/58479.
            // Also have a look at https://github.com/ehrenamtskarte/ehrenamtskarte/issues/340
            // As of flutter_plugin_android_lifecycle 2.0.1, this should no longer be necessary.
            // Once upgrading to that version, we can remove the next line together with proguard-rules.pro.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    defaultConfig {
        minSdkVersion 20
        targetSdkVersion 32
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }


    applicationVariants.all { variant ->
       variant.productFlavors.each { flavor ->

           logger.warn("Flavor name " + flavor.name)
           def buildConfigName = flavor.name == "Bayern" ? "bayern" : 
                                        flavor.name == "Nuernberg" ? "nuernberg" : 
                                        determineBuildConfigName()
           def buildConfig = createBuildConfig(buildConfigName)



           
           

           packagingOptions {
               // Exclude x86 because the app size in F-Droid is limited to 30MB
               if (buildConfig.featureFlags.excludeX86) {
                   exclude 'lib/x86**'
               }
           }
           
           // If we create a FLOSS build, then we want to exclude GMS
           if (buildConfig.excludeLocationPlayServices) {
               variant.getCompileConfiguration().exclude group: 'com.google.android.gms', module: 'play-services-location'
               variant.getRuntimeConfiguration().exclude group: 'com.google.android.gms', module: 'play-services-location'
           }
        }
    }


}

flutter {
    source '../..'
    target 'lib/main.dart'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
