### AUTO GENERATED. DO NOT MODIFY. ###
# This file should be auto generated by the files in the src folder.
# You can update it by running `yarn run circleci:update-config`.
commands:
    check_circleci_config:
        description: This command builds the circle config from the files in src and validates that it is up-to-date and valid.
        steps:
            - run:
                command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
                name: Install CircleCI CLI
            - run:
                command: ./scripts/circleci-update-config.sh
                name: Build circle config
            - run:
                command: |
                    FILES_MODIFIED=""
                    setcommit () {
                      FILES_MODIFIED=$(git status -s | grep -i -E '.*circleci/config.yml')
                    }
                    setcommit || true
                    if [ -z "$FILES_MODIFIED" ]
                    then
                      echo "The CircleCI config is up to date."
                      exit 0;
                    else
                      echo "The CircleCI config is not up to date. You can update it by running the `./scripts/circleci-update-config.sh` script."
                      exit 1;
                    fi
                name: CircleCI config up to date
            - run:
                command: circleci config validate
                name: Validate circle config
    install_app_toolbelt:
        steps:
            - setup_npm_global
            - run:
                command: npm install --unsafe-perm -g https://github.com/digitalfabrik/app-toolbelt/archive/refs/heads/main.tar.gz
                name: Install app-toolbelt
    install_dart_linux:
        steps:
            - run:
                command: |-
                    curl -o dart.deb https://storage.googleapis.com/dart-archive/channels/stable/release/3.0.5/linux_packages/dart_3.0.5-1_amd64.deb
                    sudo dpkg -i dart.deb
                name: Install Dart
    install_dart_mac:
        steps:
            - restore_cache:
                keys:
                    - brew-dart-4
            - run:
                command: |
                    brew tap dart-lang/dart
                    brew install dart
                    brew link dart
                name: Install Dart
            - save_cache:
                key: brew-dart-4
                paths:
                    - /usr/local/Cellar/dart/
                    - /usr/local/Homebrew/Library/Taps/dart-lang/homebrew-dart
                    - ~/Library/Caches/Homebrew
    install_fvm:
        steps:
            - run:
                command: |
                    dart pub global activate fvm
                    echo 'export PATH=$HOME/.pub-cache/bin:$PATH' >> $BASH_ENV
                    export PATH="$PATH":"$HOME/.pub-cache/bin"
                name: Install FVM
            - restore_cache:
                keys:
                    - fvm-0-{{ checksum "frontend/.fvm/fvm_config.json" }}-{{ arch }}
            - run:
                command: fvm install
                name: Install Flutter
                working_directory: ~/project/frontend/
            - save_cache:
                key: fvm-0-{{ checksum "frontend/.fvm/fvm_config.json" }}-{{ arch }}
                paths:
                    - .fvm
                    - ~/fvm/
            - run:
                command: fvm flutter --version
                name: Show Flutter version
                working_directory: ~/project/frontend/
            - run:
                command: fvm flutter config --no-analytics
                name: Configure Flutter
                working_directory: ~/project/frontend/
    install_protobuf_linux:
        parameters:
            dart_plugin:
                default: false
                type: boolean
        steps:
            - run:
                command: |
                    curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v21.11/protoc-21.11-linux-x86_64.zip"
                    unzip protoc*.zip -d $HOME/.local
                    echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
                name: Install protobuf from GitHub
            - when:
                condition: << parameters.dart_plugin >>
                steps:
                    - run:
                        command: dart pub global activate protoc_plugin
                        name: Install Flutter plugin
    install_protobuf_mac:
        steps:
            - run:
                command: |
                    curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v21.11/protoc-21.11-osx-x86_64.zip"
                    unzip protoc*.zip -d $HOME/.local
                    echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
                name: Install protobuf
            - run:
                command: dart pub global activate protoc_plugin
                name: Install Flutter plugin
    notify:
        description: Send a notification (to Mattermost) at the end of a job, based on success or failure. Must be the last step in a job.
        parameters:
            allow-all-branches:
                default: false
                type: boolean
            channel:
                default: '@stefanie.metzger'
                type: string
            failure_mentions:
                default: '@stefanie.metzger @andreas.fischer'
                type: string
            success_mentions:
                default: ""
                type: string
            success_message:
                default: ""
                type: string
        steps:
            - run:
                command: |
                    echo 'export MM_MESSAGE=":fire: The [${CIRCLE_JOB}](${CIRCLE_BUILD_URL}) job has failed on the ${CIRCLE_BRANCH} branch! :fire: << parameters.failure_mentions >>"' >> $BASH_ENV
                name: Mattermost - Prepare failure message
                when: on_fail
            - run:
                command: |
                    if [ -n "<< parameters.success_message >>" ]; then
                        echo 'export MM_MESSAGE="<< parameters.success_message >>"' >> $BASH_ENV
                    fi
                name: Mattermost - Prepare success message
                when: on_success
            - run:
                command: |
                    echo 'export ALLOW_ALL_BRANCHES="<< parameters.allow-all-branches >>"' >> $BASH_ENV
                    app-toolbelt v0 notify mattermost --message "${MM_MESSAGE}" --channel << parameters.channel >> ${ALLOW_ALL_BRANCHES:+--allow-all-branches}
                name: Mattermost Status Alert
                when: always
    persist_environment_variables:
        description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat ${BASH_ENV}
                name: List environment variables
            - run:
                command: cat ${BASH_ENV} >> environment_variables
                name: Save environment variables to file
            - persist_to_workspace:
                paths:
                    - environment_variables
                root: ./
    prepare_workspace:
        description: Attach the workspace at ~/attached_workspace and list its contents
        steps:
            - attach_workspace:
                at: ~/attached_workspace
            - run:
                command: ls -A ~/attached_workspace
                name: Attached workspace contents
            - run:
                command: ls -AR ~/attached_workspace
                name: Recursively list attached workspace contents
    restore_environment_variables:
        description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat ~/attached_workspace/environment_variables
                name: List environment variables
            - run:
                command: cat ~/attached_workspace/environment_variables >> ${BASH_ENV}
                name: Restore environment variables
    restore_gradle_caches:
        description: Restores and saves the gradle caches for backend.
        steps:
            - restore_cache:
                key: v3-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
            - restore_cache:
                key: v3-gradle-cache-{{ checksum "build.gradle.kts" }}
    restore_npm_cache:
        description: Restores and saves the node_modules directories of the npm workspaces.
        steps:
            - restore_cache:
                keys:
                    - v1-node-modules-{{ checksum "package.json" }}-{{checksum "package-lock.json" }}-{{ checksum "administration/package.json" }}-{{checksum "administration/package-lock.json" }}-{{ checksum "frontend/build-configs/package.json" }}-{{checksum "frontend/build-configs/package-lock.json" }}
            - run:
                command: '[ ! -d node_modules ] && npm ci --ignore-scripts --loglevel warn --yes || echo package.json and package-lock.json unchanged. Using cache.'
                name: Install node dependencies for npm workspace
            - save_cache:
                key: v1-node-modules-{{ checksum "package.json" }}-{{checksum "package-lock.json" }}-{{ checksum "administration/package.json" }}-{{checksum "administration/package-lock.json" }}-{{ checksum "frontend/build-configs/package.json" }}-{{checksum "frontend/build-configs/package-lock.json" }}
                paths:
                    - ~/node_modules
                    - ~/administration/node_modules
    restore_pods:
        description: Restores and saves the cocoa pods cache.
        steps:
            - restore_cache:
                keys:
                    - 1-pods-{{ arch }}-{{ checksum "frontend/ios/Podfile.lock" }}
                name: Restore CocoaPods Cache
            - run:
                command: |
                    pod update
                    pod install
                name: '[CP] Install CocoaPods'
                working_directory: frontend/ios
            - save_cache:
                key: 1-pods-{{ arch }}-{{ checksum "frontend/ios/Podfile.lock" }}
                name: Save CocoaPods Cache
                paths:
                    - ~/Library/Caches/CocoaPods/
    restore_ruby_cache:
        description: Restores and saves fastlane cache of the passed directory.
        parameters:
            directory:
                default: native
                type: string
        steps:
            - restore_cache:
                keys:
                    - 1-gems-{{ arch }}-{{ checksum "<< parameters.directory >>/Gemfile.lock" }}
                    - 1-gems-{{ arch }}-
            - run:
                command: bundle check || bundle install
                name: '[FL] install'
                working_directory: << parameters.directory >>
            - save_cache:
                key: 1-gems-{{ arch }}-{{ checksum "<< parameters.directory >>/Gemfile.lock" }}
                paths:
                    - << parameters.directory >>/vendor/bundle
    setup_npm_global:
        steps:
            - run:
                command: |-
                    mkdir -p ~/.npm-global
                    npm config set prefix '~/.npm-global'
                    echo 'export PATH=~/.npm-global/bin:"$PATH"' >> "$BASH_ENV"
                name: Setup npm
jobs:
    build_administration:
        docker:
            - image: cimg/node:19.1.0
        steps:
            - checkout:
                path: ~/project
            - install_dart_linux
            - install_protobuf_linux
            - install_app_toolbelt
            - prepare_workspace
            - restore_environment_variables
            - restore_npm_cache
            - run:
                command: npm run generate-graphql
                name: Generate GraphQL
                working_directory: ~/project/administration
            - run:
                command: npm run generate-protobuf
                name: Generate Protobuf
                working_directory: ~/project/administration
            - run:
                command: npm run build --version_name=${NEW_VERSION_NAME}
                name: Build
                working_directory: ~/project/administration
            - store_artifacts:
                path: ~/attached_workspace/build
            - persist_to_workspace:
                paths:
                    - administration/build
                root: ~/project
            - notify
        working_directory: ~/project
    build_android:
        docker:
            - image: cimg/android:2022.09.2-node
        environment:
            GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2048m" -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
        parameters:
            buildConfig:
                description: Name of the build config to use
                enum:
                    - bayern
                    - bayern-floss
                    - nuernberg
                type: enum
            flutterFlavor:
                description: Flutter Flavor to use
                enum:
                    - Bayern
                    - BayernFloss
                    - Nuernberg
                type: enum
        resource_class: large
        steps:
            - checkout:
                path: ~/project
            - add_ssh_keys:
                fingerprints:
                    - 24:1d:3b:b7:b3:49:69:d7:54:c3:93:a5:a2:d1:71:db
            - prepare_workspace
            - install_dart_linux
            - install_fvm
            - install_app_toolbelt
            - install_protobuf_linux:
                dart_plugin: true
            - run:
                command: bundle update --bundler
                name: Install bundler
                working_directory: ~/project/frontend/android
            - restore_environment_variables
            - restore_ruby_cache:
                directory: ~/project/frontend/android
            - run:
                command: |
                    fvm flutter pub get --enforce-lockfile
                    fvm flutter precache --android
                name: Install Flutter Packages
                working_directory: ~/project/frontend/android
            - run:
                command: bundle exec fastlane keystore
                name: '[FL] Prepare Android Keystore'
                working_directory: ~/project/frontend/android
            - run:
                command: bundle exec fastlane android build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE} flavor:<< parameters.flutterFlavor >> build_config_name:<< parameters.buildConfig >>
                name: '[FL] Build'
                working_directory: ~/project/frontend/android
            - run:
                command: mkdir -p attached_workspace
                name: Make attached_workspace dir
            - run:
                command: mv ~/project/frontend/build/app/outputs/bundle/<< parameters.buildConfig >>Release/app-<< parameters.buildConfig >>-release.aab ~/attached_workspace/<< parameters.buildConfig >>.aab
                name: Move aab
            - run:
                command: mv ~/project/frontend/build/app/outputs/apk/<< parameters.flutterFlavor >>/release/app-<< parameters.flutterFlavor >>-release.apk ~/attached_workspace/<< parameters.buildConfig >>.apk
                name: Move apk
            - persist_to_workspace:
                paths:
                    - << parameters.buildConfig >>.aab
                    - << parameters.buildConfig >>.apk
                root: ~/attached_workspace
            - store_artifacts:
                path: ~/attached_workspace/
            - notify
    build_backend:
        docker:
            - image: cimg/openjdk:17.0.6-node
        environment:
            _JAVA_OPTIONS: -Xmx3g
            GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
        steps:
            - checkout:
                path: ~/project
            - run: git submodule sync
            - run: git submodule update --init
            - install_app_toolbelt
            - install_protobuf_linux
            - prepare_workspace
            - restore_cache:
                key: v3-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
            - restore_cache:
                key: v3-gradle-cache-{{ checksum "build.gradle.kts" }}
            - run: ./gradlew build
            - save_cache:
                key: v3-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
                paths:
                    - ~/gradle/wrapper
            - save_cache:
                key: v3-gradle-cache-{{ checksum "build.gradle.kts" }}
                paths:
                    - ~/.gradle/caches
            - store_artifacts:
                path: ~/attached_workspace/build/libs
            - persist_to_workspace:
                paths:
                    - backend/build/distributions/*
                root: ~/project
            - notify
        working_directory: ~/project/backend
    build_ios:
        macos:
            xcode: 14.3.1
        parameters:
            buildConfig:
                description: Name of the build config to use
                enum:
                    - bayern
                    - bayern-floss
                    - nuernberg
                type: enum
            flutterFlavor:
                description: Flutter Flavor to use
                enum:
                    - Bayern
                    - BayernFloss
                    - Nuernberg
                type: enum
        steps:
            - checkout:
                path: ~/project
            - install_dart_mac
            - install_fvm
            - install_app_toolbelt
            - install_protobuf_mac
            - prepare_workspace
            - restore_environment_variables
            - restore_ruby_cache:
                directory: frontend/ios
            - run:
                command: |
                    fvm flutter pub get --enforce-lockfile
                    fvm flutter precache --ios
                name: Install Flutter Packages
                working_directory: frontend/
            - restore_pods
            - run:
                command: bundle exec fastlane ios build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE} flavor:<< parameters.flutterFlavor >> build_config_name:<< parameters.buildConfig >>
                name: '[FL] Build'
                working_directory: frontend/ios
            - store_artifacts:
                path: ~/<< parameters.buildConfig >>.ipa
            - persist_to_workspace:
                paths:
                    - << parameters.buildConfig >>.ipa
                root: ~/
            - notify
    build_martin:
        docker:
            - image: rust:bullseye
        steps:
            - install_app_toolbelt
            - run:
                command: |
                    mkdir -p ~/.ssh
                    touch ~/.ssh/known_hosts
                    echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=" >> ~/.ssh/known_hosts
                    git clone git@github.com:urbica/martin.git ~/martin
                    git config advice.detachedHead false
                    git checkout ed14582a8f5c3e11bfb165f3b012edccd929b479
                name: Checkout
            - restore_cache:
                keys:
                    - v1-cargo-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
            - prepare_workspace
            - run:
                command: |
                    apt update
                    apt install -y openssl libssl-dev
                name: Install OpenSSL
            - run:
                command: |
                    cargo build --release --target x86_64-unknown-linux-gnu
                name: Build
            - save_cache:
                key: v1-cargo-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
                paths:
                    - ~/.cargo
                    - target
            - run:
                command: |
                    mkdir -p ~/attached_workspace/artifacts/martin
                    cp target/x86_64-unknown-linux-gnu/release/martin ~/attached_workspace/artifacts/martin
                name: Prepare storing
            - store_artifacts:
                path: ~/attached_workspace/artifacts
            - persist_to_workspace:
                paths:
                    - martin/martin
                root: ~/attached_workspace/artifacts
            - notify
        working_directory: ~/martin
    bump_version:
        docker:
            - image: cimg/node:18.14.1
        parameters:
            prepare_delivery:
                default: false
                description: Whether to prepare for a delivery. If true, the version bump is committed.
                type: boolean
        resource_class: small
        steps:
            - checkout
            - install_app_toolbelt
            - run:
                command: echo "export NEW_VERSION_NAME=$(app-toolbelt v0 version calc | jq .versionName)" >> ${BASH_ENV}
                name: Calculate next version name
            - run:
                command: echo "export NEW_VERSION_CODE=$(app-toolbelt v0 version calc | jq .versionCode)" >> ${BASH_ENV}
                name: Calculate next version code
            - when:
                condition: << parameters.prepare_delivery >>
                steps:
                    - run:
                        command: app-toolbelt v0 release bump-to ${NEW_VERSION_NAME} ${NEW_VERSION_CODE} --deliverino-private-key ${DELIVERINO_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --branch ${CIRCLE_BRANCH}
                        name: Bump git version
            - when:
                condition:
                    and:
                        - << parameters.prepare_delivery >>
                        - not:
                            equal:
                                - main
                                - << pipeline.git.branch >>
                steps:
                    - notify:
                        allow-all-branches: true
                        success_message: Delivery was made on branch << pipeline.git.branch >>. Make sure to merge this branch before next delivery.
            - persist_environment_variables
            - notify
    check:
        docker:
            - image: cimg/node:19.1.0-browsers
        environment:
            TOTAL_CPUS: 1
            TZ: Europe/Berlin
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - install_app_toolbelt
            - run:
                command: npm run lint1
                name: error
            - check_circleci_config
            - notify:
                allow-all-branches: true
    check_administration:
        docker:
            - image: cimg/node:19.1.0
        steps:
            - checkout:
                path: ~/project
            - install_dart_linux
            - install_protobuf_linux
            - prepare_workspace
            - restore_npm_cache
            - run:
                command: npm run generate-graphql
                name: Generate GraphQL
                working_directory: ~/project/administration
            - run:
                command: npm run generate-protobuf
                name: Generate Protobuf
                working_directory: ~/project/administration
            - run:
                command: npm run lint
                name: Lint
                working_directory: ~/project/administration
            - run:
                command: npm run test -- --maxWorkers=2
                name: Test
                working_directory: ~/project/administration
            - run:
                command: npm run ts:check
                name: Typescript
                working_directory: ~/project/administration
        working_directory: ~/project
    check_backend:
        docker:
            - image: cimg/openjdk:17.0.6-node
        environment:
            _JAVA_OPTIONS: -Xmx3g
            GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
        steps:
            - checkout:
                path: ~/project
            - run: git submodule sync
            - run: git submodule update --init
            - install_protobuf_linux
            - prepare_workspace
            - restore_cache:
                key: v3-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
            - restore_cache:
                key: v3-gradle-cache-{{ checksum "build.gradle.kts" }}
            - run:
                command: |
                    ./gradlew run --args="graphql-export ../specs/backend-api.graphql"
                    git diff --exit-code
                name: Check that GraphQL scheme is stable
            - run:
                command: |
                    ./gradlew test
                name: Test
            - save_cache:
                key: v3-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
                paths:
                    - ~/.gradle/wrapper
            - save_cache:
                key: v3-gradle-cache-{{ checksum "build.gradle.kts" }}
                paths:
                    - ~/.gradle/caches
        working_directory: ~/project/backend
    check_frontend:
        docker:
            - image: cimg/node:19.1.0-browsers
        resource_class: small
        steps:
            - checkout:
                path: ~/project
            - browser-tools/install-chrome
            - install_dart_linux
            - install_fvm
            - install_app_toolbelt
            - install_protobuf_linux:
                dart_plugin: true
            - run:
                command: fvm flutter pub get --enforce-lockfile
                name: Install Flutter Packages
                working_directory: ~/project/frontend/
            - run:
                command: fvm dart format -l 120 -o none --set-exit-if-changed .
                name: Check Formatting
                working_directory: ~/project/frontend/
            - run:
                command: |
                    # Statically use "bayern" build config for analyzing here
                    fvm flutter pub run build_runner build --define "df_build_config=name=bayern"
                name: Build Runner
                working_directory: ~/project/frontend/
            - run:
                command: |
                    fvm flutter analyze --fatal-infos --fatal-warnings
                    fvm flutter analyze pubs/df_build_config --fatal-infos --fatal-warnings
                    fvm flutter analyze pubs/df_protobuf --fatal-infos --fatal-warnings
                name: Check Analyzer and Linting
                working_directory: ~/project/frontend/
            - run:
                command: |
                    fvm flutter test
                    fvm flutter test pubs/df_build_config
                    fvm flutter test pubs/df_protobuf
                name: Tests
                working_directory: ~/project/frontend/
            - notify
    check_health_backend:
        docker:
            - image: cimg/base:2023.03
            - environment:
                - POSTGRES_DB=ehrenamtskarte
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=postgres
              image: postgis/postgis:13-3.0-alpine
        steps:
            - checkout:
                path: ~/project
            - attach_workspace:
                at: /tmp/workspace
            - run: apt update -y && apt install -y nodejs npm
            - install_app_toolbelt
            - run:
                command: |
                    sudo apt update
                    sudo apt install curl -y
                name: Install Curl
            - run:
                command: sudo apt install ca-certificates-java
                name: Install ca-certificates-java
            - run:
                command: sudo apt install openjdk-17-jre-headless -y
                name: Install openjdk-17-jre-headless
            - run:
                command: sudo dpkg -i /tmp/workspace/debs/backend/eak-backend*.deb
                name: Install backend
            - run:
                command: /opt/ehrenamtskarte/backend/bin/backend migrate
                name: Run migrate
            - run:
                background: true
                command: /opt/ehrenamtskarte/backend/bin/backend execute
                name: Start backend
            - run:
                command: curl --retry 120 --retry-delay 1 --retry-all-errors http://0.0.0.0:8000/health
                name: Check health
            - notify
    deliver_android:
        docker:
            - image: cimg/android:2023.02.1-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        parameters:
            buildConfig:
                enum:
                    - bayern
                    - bayern-floss
                    - nuernberg
                type: enum
            production_delivery:
                description: Whether to deliver the build to production.
                type: boolean
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout:
                path: ~/project
            - prepare_workspace
            - restore_ruby_cache:
                directory: ~/project/frontend/android
            - install_app_toolbelt
            - restore_environment_variables
            - run:
                command: bundle exec fastlane android upload_to_playstore build_config_name:<< parameters.buildConfig >> production_delivery:"<< parameters.production_delivery >>" version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
                name: '[FL] Play Store Upload'
                working_directory: ~/project/frontend/android
            - notify
    deliver_ios:
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        macos:
            xcode: 15.0.1
        parameters:
            buildConfig:
                enum:
                    - bayern
                    - nuernberg
                type: enum
            production_delivery:
                description: Whether to deliver the build to production.
                type: boolean
        shell: /bin/bash --login -o pipefail
        steps:
            - checkout
            - prepare_workspace
            - restore_environment_variables
            - install_app_toolbelt
            - restore_ruby_cache:
                directory: ~/project/frontend/ios
            - when:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: echo "not implemented yet"
                        name: '[FL] App Store Connect Upload'
                        working_directory: frontend/ios
            - unless:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: bundle exec fastlane ios upload_to_test_flight build_config_name:<< parameters.buildConfig >> ipa_path:attached_workspace/<< parameters.buildConfig >>.ipa
                        name: '[FL] TestFlight Upload'
                        working_directory: frontend/ios
            - notify
    deliver_to_server:
        docker:
            - image: cimg/base:2022.09
        parameters:
            bundle:
                description: Defines which bundle should be deployed to the server.
                enum:
                    - administration
                    - backend
                type: enum
            production:
                description: Whether builds are delivered to production or beta.
                type: boolean
        steps:
            - run:
                command: |
                    sudo apt update
                    sudo apt install curl -y
                name: Install Curl
            - prepare_workspace
            - add_ssh_keys:
                fingerprints:
                    - a1:3f:a7:c3:ff:12:40:1d:85:de:a7:ab:12:3f:cc:05
            - when:
                condition: << parameters.production >>
                steps:
                    - run:
                        command: |
                            echo ${APT_FINGERPRINT_PRODUCTION} >> known_hosts
                            echo "Uploading: " ~/attached_workspace/debs/<< parameters.bundle >>/*.deb
                        name: SFTP upload package
            - unless:
                condition: << parameters.production >>
                steps:
                    - run:
                        command: |
                            echo ${APT_FINGERPRINT_STAGING} >> known_hosts
                            echo "Uploading: " /home/circleci/attached_workspace/debs/<< parameters.bundle >>/*.deb
                            sftp -b - -o UserKnownHostsFile=known_hosts ci@entitlementcard-test.tuerantuer.org:/local-apt-repository/ \<<< "put -r /home/circleci/attached_workspace/debs/<< parameters.bundle >>/*.deb"
                        name: SFTP upload package
                    - run:
                        command: |
                            curl https://webhook.entitlementcard-test.tuerantuer.org/hooks/install-<< parameters.bundle >>-$EAK_WEBHOOK
                        name: Install package via webhook
    pack_administration:
        docker:
            - image: debian:11
        steps:
            - checkout:
                path: ~/project
            - prepare_workspace
            - restore_environment_variables
            - run: ~/project/scripts/pack_deb.sh -v "${NEW_VERSION_NAME}" -f ~/attached_workspace/administration/build -d "Administration backend for the Ehrenamtskarte app" -n "eak-administration"
            - install_app_toolbelt
            - run: |
                mkdir -p ~/attached_workspace/debs/administration
                mv *.deb ~/attached_workspace/debs/administration
            - store_artifacts:
                path: ~/attached_workspace
            - persist_to_workspace:
                paths:
                    - debs/administration/*.deb
                root: ~/attached_workspace
            - notify
        working_directory: ~/project/administration
    pack_backend:
        docker:
            - image: debian:11
        steps:
            - checkout:
                path: ~/project
            - prepare_workspace
            - restore_environment_variables
            - run: apt update -y && apt install -y nodejs npm
            - install_app_toolbelt
            - run: ~/project/scripts/pack_deb.sh -v "${NEW_VERSION_NAME}" -t ~/attached_workspace/backend/build/distributions/*.tar -s ~/project/scripts/eak-backend.service -d "Backend server for the Ehrenamtskarte app" -n "eak-backend" -c "openjdk-17-jre-headless"
            - run: |
                mkdir -p ~/attached_workspace/debs/backend
                mv *.deb ~/attached_workspace/debs/backend
            - store_artifacts:
                path: ~/attached_workspace
            - persist_to_workspace:
                paths:
                    - debs/backend/*.deb
                root: ~/attached_workspace
            - notify
        working_directory: ~/project/backend
    pack_martin:
        docker:
            - image: debian:11
        steps:
            - checkout:
                path: ~/project
            - prepare_workspace
            - restore_environment_variables
            - attach_workspace:
                at: /tmp/workspace
            - run: apt update -y && apt install -y nodejs npm
            - install_app_toolbelt
            - run:
                command: |
                    cp ~/project/docker/martin-config.yaml config.yaml
                    cp ~/attached_workspace/martin/martin .
                    ~/project/scripts/pack_deb.sh -v "${NEW_VERSION_NAME}" -d "Martin tile server for the Ehrenamtskarte app" -n "eak-martin" -s ~/project/scripts/eak-martin.service -C "/opt/ehrenamtskarte/martin/config.yaml" -M .
                name: Build .deb
            - run:
                command: |
                    mkdir -p ~/attached_workspace/debs/backend
                    mv *.deb ~/attached_workspace/debs/backend
                name: Move .deb to artifacts folder
            - store_artifacts:
                path: ~/attached_workspace
            - persist_to_workspace:
                paths:
                    - debs/backend/*.deb
                root: ~/attached_workspace
            - notify
        working_directory: ~/project/map-tiles/martin
    pack_meta:
        docker:
            - image: debian:11
        steps:
            - checkout:
                path: ~/project
            - prepare_workspace
            - restore_environment_variables
            - run: ~/project/scripts/pack_deb.sh -v "${NEW_VERSION_NAME}" -d "Meta package for the Ehrenamtskarte app" -n "eak" -c "eak-backend, eak-administration, eak-martin"
            - run: apt update -y && apt install -y nodejs npm
            - install_app_toolbelt
            - run: |
                mkdir -p ~/attached_workspace/debs/backend
                cp *.deb ~/attached_workspace/debs/backend
            - store_artifacts:
                path: ~/attached_workspace
            - persist_to_workspace:
                paths:
                    - debs/backend/*.deb
                root: ~/attached_workspace
            - notify
        working_directory: ~/project/administration
    promote_android:
        docker:
            - image: cimg/android:2023.02.1-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        parameters:
            build_config_name:
                default: bayern
                enum:
                    - bayern
                    - nuernberg
                type: enum
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - restore_ruby_cache:
                directory: ~/project/frontend/android
            - install_app_toolbelt
            - run:
                command: bundle exec fastlane android playstore_promote build_config_name:<< parameters.build_config_name >>
                name: '[FL] Play Store Promotion'
                working_directory: frontend/android
            - notify
orbs:
    browser-tools: circleci/browser-tools@1.4.1
    gradle: circleci/gradle@2.2.0
parameters:
    run_commit:
        default: true
        type: boolean
    run_commit_main:
        default: true
        type: boolean
    run_deliver_beta_administration:
        default: false
        type: boolean
    run_deliver_beta_backend:
        default: false
        type: boolean
    run_deliver_production_administration:
        default: false
        type: boolean
    run_deliver_production_backend:
        default: false
        type: boolean
    run_delivery_beta_native:
        default: false
        type: boolean
    run_frontend:
        default: false
        type: boolean
    run_promote_native:
        default: false
        type: boolean
version: 2.1
workflows:
    commit:
        jobs:
            - check
            - check_backend
            - check_administration
            - check_frontend
        when:
            and:
                - << pipeline.parameters.run_commit >>
                - not:
                    equal:
                        - main
                        - << pipeline.git.branch >>
    commit_main:
        jobs:
            - bump_version:
                prepare_delivery: false
            - check
            - check_administration
            - check_backend
            - build_administration:
                requires:
                    - check_administration
                    - bump_version
            - pack_administration:
                requires:
                    - build_administration
            - build_martin
            - build_backend:
                requires:
                    - check_backend
            - pack_backend:
                requires:
                    - build_backend
                    - bump_version
            - check_health_backend:
                requires:
                    - pack_backend
            - pack_martin:
                requires:
                    - build_martin
                    - bump_version
            - pack_meta:
                requires:
                    - bump_version
            - check_frontend
            - build_android:
                buildConfig: bayern
                context:
                    - credentials-repo
                    - credentials-ehrenamtskarte
                flutterFlavor: Bayern
                name: build_android_bayern
                requires:
                    - bump_version
                    - check_frontend
            - build_ios:
                buildConfig: bayern
                context:
                    - tuerantuer-apple
                    - fastlane-match
                flutterFlavor: Bayern
                name: build_ios_bayern
                requires:
                    - bump_version
                    - check_frontend
        when:
            and:
                - << pipeline.parameters.run_commit_main >>
                - equal:
                    - main
                    - << pipeline.git.branch >>
    deliver_beta_administration:
        jobs:
            - bump_version:
                context:
                    - deliverino
                prepare_delivery: true
            - check_administration
            - build_administration:
                requires:
                    - check_administration
                    - bump_version
            - pack_administration:
                requires:
                    - build_administration
            - deliver_to_server:
                bundle: administration
                context:
                    - credentials-ehrenamtskarte
                name: deliver_administration_staging
                production: false
                requires:
                    - pack_administration
        when: << pipeline.parameters.run_deliver_beta_administration >>
    deliver_beta_backend:
        jobs:
            - bump_version:
                context:
                    - deliverino
                prepare_delivery: true
            - build_martin
            - check_backend
            - build_backend:
                requires:
                    - check_backend
            - pack_backend:
                requires:
                    - build_backend
                    - bump_version
            - check_health_backend:
                requires:
                    - pack_backend
            - pack_martin:
                requires:
                    - build_martin
                    - bump_version
            - pack_meta:
                requires:
                    - bump_version
            - deliver_to_server:
                bundle: backend
                context:
                    - credentials-ehrenamtskarte
                name: deliver_backend_staging
                production: false
                requires:
                    - check_health_backend
                    - pack_martin
                    - pack_meta
        when: << pipeline.parameters.run_deliver_beta_backend >>
    deliver_production_administration:
        jobs:
            - bump_version:
                context:
                    - deliverino
                prepare_delivery: true
            - check_administration
            - build_administration:
                requires:
                    - check_administration
            - pack_administration:
                requires:
                    - build_administration
                    - bump_version
            - deliver_to_server:
                bundle: administration
                context:
                    - credentials-ehrenamtskarte
                name: deliver_administration_production
                production: true
                requires:
                    - pack_administration
        when: << pipeline.parameters.run_deliver_production_administration >>
    deliver_production_backend:
        jobs:
            - bump_version:
                context:
                    - deliverino
                prepare_delivery: true
            - build_martin
            - check_backend
            - build_backend:
                requires:
                    - check_backend
            - pack_backend:
                requires:
                    - build_backend
                    - bump_version
            - check_health_backend:
                requires:
                    - pack_backend
            - pack_martin:
                requires:
                    - build_martin
                    - bump_version
            - pack_meta:
                requires:
                    - bump_version
            - deliver_to_server:
                bundle: backend
                context:
                    - credentials-ehrenamtskarte
                name: deliver_backend_production
                production: true
                requires:
                    - check_health_backend
                    - pack_martin
                    - pack_meta
        when: << pipeline.parameters.run_deliver_production_backend >>
    delivery_beta_native:
        jobs:
            - bump_version:
                context:
                    - deliverino
                prepare_delivery: true
            - check_frontend
            - build_android:
                buildConfig: bayern
                context:
                    - credentials-repo
                    - credentials-ehrenamtskarte
                flutterFlavor: Bayern
                name: build_android_bayern
                requires:
                    - bump_version
                    - check_frontend
            - deliver_android:
                buildConfig: bayern
                context:
                    - tuerantuer-google-play
                name: deliver_android_bayern
                production_delivery: false
                requires:
                    - build_android_bayern
            - build_android:
                buildConfig: nuernberg
                context:
                    - credentials-repo
                    - credentials-ehrenamtskarte
                flutterFlavor: Nuernberg
                name: build_android_nuernberg
                requires:
                    - bump_version
                    - check_frontend
            - deliver_android:
                buildConfig: nuernberg
                context:
                    - tuerantuer-google-play
                name: deliver_android_nuernberg
                production_delivery: false
                requires:
                    - build_android_nuernberg
            - build_ios:
                buildConfig: bayern
                context:
                    - tuerantuer-apple
                    - fastlane-match
                flutterFlavor: Bayern
                name: build_ios_bayern
                requires:
                    - bump_version
                    - check_frontend
            - deliver_ios:
                buildConfig: bayern
                context:
                    - tuerantuer-apple
                name: deliver_bayern_ios
                production_delivery: false
                requires:
                    - build_ios_bayern
            - build_ios:
                buildConfig: nuernberg
                context:
                    - tuerantuer-apple
                    - fastlane-match
                flutterFlavor: Nuernberg
                name: build_ios_nuernberg
                requires:
                    - bump_version
                    - check_frontend
            - deliver_ios:
                buildConfig: nuernberg
                context:
                    - tuerantuer-apple
                name: deliver_nuernberg_ios
                production_delivery: false
                requires:
                    - build_ios_nuernberg
        when: << pipeline.parameters.run_delivery_beta_native >>
    frontend:
        jobs:
            - check_frontend
            - build_android:
                buildConfig: bayern-floss
                flutterFlavor: BayernFloss
                name: frontend-android-build-bayern-floss
                requires:
                    - check_frontend
            - build_android:
                buildConfig: bayern
                flutterFlavor: Bayern
                name: frontend-android-build-bayern
                requires:
                    - check_frontend
            - build_ios:
                buildConfig: bayern
                flutterFlavor: Bayern
                name: frontend-ios-build-bayern
                requires:
                    - check_frontend
            - build_android:
                buildConfig: nuernberg
                flutterFlavor: Nuernberg
                name: frontend-android-build-nuernberg
                requires:
                    - check_frontend
            - build_ios:
                buildConfig: nuernberg
                flutterFlavor: Nuernberg
                name: frontend-ios-build-nuernberg
                requires:
                    - check_frontend
        when: << pipeline.parameters.run_frontend >>
    promote_native:
        jobs:
            - promote_android:
                build_config_name: bayern
                context:
                    - mattermost
                    - tuerantuer-google-play
                name: promote_bayern_android
            - promote_android:
                build_config_name: nuernberg
                context:
                    - mattermost
                    - tuerantuer-google-play
                name: promote_nuernberg_android
        when: << pipeline.parameters.run_promote_native >>

