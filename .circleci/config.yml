version: 2.1
orbs:
  gradle: circleci/gradle@2.2.0
workflows:
  default:
    jobs:
      - be-build
      - ad-build
      - martin-build
      - be-pack:
          requires:
            - be-build
      - ad-pack:
          requires:
            - ad-build
      - martin-pack:
          requires:
            - martin-build
      - meta-pack
      - styles-pack
      - deploy:
          requires:
            - be-pack
            - ad-pack
            - styles-pack
            - martin-pack
            - meta-pack
          filters:
            branches:
              only:
                - main

jobs:
  be-build:
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          key: v2-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v2-gradle-cache-{{ checksum "build.gradle.kts" }}
      - run: ./gradlew build
      - save_cache:
          paths:
            - .gradle/wrapper
          key: v2-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - .gradle/caches
          key: v2-gradle-cache-{{ checksum "build.gradle.kts" }}
      - store_artifacts:
          path: build/libs
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend/build/distributions/*

  ad-build:
    docker:
      - image: cimg/node:15.8.0
    working_directory: ~/project/administration
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - v1-node-modules-{{ checksum "package.json" }}-{{checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: "[ ! -d node_modules ] && npm ci --loglevel warn --yes || echo package.json and package-lock.json unchanged. Using cache."
      - run: |
          npm run generate-graphql
          npm run generate-protobuf
          npm run-script build
      - save_cache:
          paths:
            - node_modules
          key: v1-node-modules-{{ checksum "package.json" }}-{{checksum "package-lock.json" }}
      - store_artifacts:
          path: build
      - persist_to_workspace:
          root: ~/project
          paths:
            - administration/build

  martin-build:
    docker:
      - image: rust:1.50.0
    working_directory: ~/martin
    steps:
      - run:
          name: "Checkout"
          command: |
            mkdir -p ~/.ssh
            touch ~/.ssh/known_hosts
            echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" >> ~/.ssh/known_hosts
            git clone git@github.com:urbica/martin.git ~/martin
            git config advice.detachedHead false
            git checkout ed14582a8f5c3e11bfb165f3b012edccd929b479
      - restore_cache:
          keys:
            - v1-cargo-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Install OpenSSL"
          command: |
            apt update
            apt install -y openssl libssl-dev
      - run:
          name: "Build"
          command: |
            cargo build --release --target x86_64-unknown-linux-gnu
      - save_cache:
          paths:
            - "~/.cargo"
            - "target"
          key: v1-cargo-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Prepare storing"
          command: |
            mkdir -p /tmp/artifacts/martin
            cp target/x86_64-unknown-linux-gnu/release/martin /tmp/artifacts/martin
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - martin/martin

  be-pack:
    docker:
      - image: cimg/base:2020.01
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: /tmp/workspace
      - run: ~/project/scripts/pack_deb.sh -v "0.$CIRCLE_BUILD_NUM" -t /tmp/workspace/backend/build/distributions/*.tar -s ~/project/scripts/eak-backend.service -d "Backend server for the Ehrenamtskarte app" -n "eak-backend" -c "default-jre"
      - run: |
          mkdir -p /tmp/artifacts/debs
          mv *.deb /tmp/artifacts/debs
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - debs/*.deb

  ad-pack:
    docker:
      - image: cimg/base:2020.01
    working_directory: ~/project/administration
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: /tmp/workspace
      - run: ~/project/scripts/pack_deb.sh -v "0.$CIRCLE_BUILD_NUM" -f /tmp/workspace/administration/build -d "Administration backend for the Ehrenamtskarte app" -n "eak-administration"
      - run: |
          mkdir -p /tmp/artifacts/debs
          mv *.deb /tmp/artifacts/debs
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - debs/*.deb

  styles-pack:
    docker:
      - image: cimg/base:2020.01
    working_directory: ~/project/map-tiles/styles
    steps:
      - checkout:
          path: ~/project
      - run:
          name: "Download glyphs"
          command: |
            wget -O /tmp/glyphs.zip https://github.com/orangemug/font-glyphs/archive/gh-pages.zip
            unzip /tmp/glyphs.zip
            mv font-glyphs* font-glyphs
            rm -f /tmp/glyphs.zip
      - run:
          name: "Build .deb"
          command: ~/project/scripts/pack_deb.sh -v "0.$CIRCLE_BUILD_NUM" -m . -d "Mapbox styles.json with dependencies for the Ehrenamtskarte app" -n "eak-map-styles"
      - run:
          name: "Move .deb to artifacts folder"
          command: |
            mkdir -p /tmp/artifacts/debs
            mv *.deb /tmp/artifacts/debs
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - debs/*.deb

  martin-pack:
    docker:
      - image: cimg/base:2020.01
    working_directory: ~/project/map-tiles/martin
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Build .deb"
          command: |
            cp /tmp/workspace/martin/martin .
            ~/project/scripts/pack_deb.sh -v "0.$CIRCLE_BUILD_NUM" -d "Martin tile server for the Ehrenamtskarte app" -n "eak-martin" -s ~/project/scripts/eak-martin.service -C "/opt/ehrenamtskarte/martin/config.yaml" -M .
      - run:
          name: "Move .deb to artifacts folder"
          command: |
            mkdir -p /tmp/artifacts/debs
            mv *.deb /tmp/artifacts/debs
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - debs/*.deb

  meta-pack:
    docker:
      - image: cimg/base:2020.01
    working_directory: ~/project/administration
    steps:
      - checkout:
          path: ~/project
      - run: ~/project/scripts/pack_deb.sh -v "0.$CIRCLE_BUILD_NUM" -d "Meta package for the Ehrenamtskarte app" -n "eak" -c "eak-backend, eak-administration, eak-map-styles, eak-martin"
      - run: |
          mkdir -p /tmp/artifacts/debs
          cp *.deb /tmp/artifacts/debs
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - debs/*.deb

  deploy:
    docker:
      - image: cimg/base:2020.01
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - "5c:8a:70:dc:61:9d:fa:c2:c2:6d:2d:fc:4a:ab:d2:e3"
      - run:
          name: "SFTP upload"
          command: |
            echo $APT_HOST_FINGERPRINT > known_hosts
            echo "Uploading: " /tmp/workspace/debs/*.deb
            sftp -b - -o UserKnownHostsFile=known_hosts ci@apt.ehrenamtskarte.app:/local-apt-repository/ \<<< "put -r /tmp/workspace/debs/*.deb"
