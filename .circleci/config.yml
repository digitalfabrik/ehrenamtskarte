version: 2.1
orbs:
  gradle: circleci/gradle@2.2.0
  browser-tools: circleci/browser-tools@1.4.1
workflows:
  frontend:
    jobs:
      - check-frontend
      - frontend-android-build:
          name: frontend-android-build-bayern-floss
          buildConfig: "bayern-floss"
          flutterFlavor: "BayernFloss"
          requires:
            - check-frontend
      - frontend-android-build:
          name: frontend-android-build-bayern
          buildConfig: "bayern"
          flutterFlavor: "Bayern"
          requires:
            - check-frontend
      - frontend-ios-build:
          name: frontend-ios-build-bayern
          buildConfig: "bayern"
          flutterFlavor: "Bayern"
          requires:
            - check-frontend
      - frontend-android-build:
          name: frontend-android-build-nuernberg
          buildConfig: "nuernberg"
          flutterFlavor: "Nuernberg"
          requires:
            - check-frontend
      - frontend-ios-build:
          name: frontend-ios-build-nuernberg
          buildConfig: "nuernberg"
          flutterFlavor: "Nuernberg"
          requires:
            - check-frontend
  backend:
    jobs:
      - backend-build
      - administration-build
      - martin-build
      - backend-pack:
          requires:
            - backend-build
      - backend-health-check:
          requires:
            - backend-pack
      - administration-pack:
          requires:
            - administration-build
      - martin-pack:
          requires:
            - martin-build
      - meta-pack
      - deploy:
          name: deploy-staging
          server: staging.entitlementcard.app
          context:
            - entitlementcard-apt
          requires:
            - backend-pack
            - backend-health-check
            - administration-pack
            - martin-pack
            - meta-pack

      - deploy:
          name: deploy-production
          server: entitlementcard.app
          context:
            - entitlementcard-apt
          requires:
            - backend-pack
            - administration-pack
            - martin-pack
            - meta-pack
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

commands:
  setup-npm-global:
    steps:
      - run:
          name: Setup npm
          command: |
            mkdir -p ~/.npm-global
            npm config set prefix '~/.npm-global'
            echo 'export PATH=~/.npm-global/bin:"$PATH"' >> "$BASH_ENV"
  install-app-toolbelt:
    steps:
      - setup-npm-global
      - run:
          name: Install app-toolbelt
          command: npm install --unsafe-perm -g https://github.com/digitalfabrik/app-toolbelt/archive/refs/heads/main.tar.gz
  install-dart-linux:
    steps:
      - run:
          name: Install Dart
          command: |
            curl -o dart.deb https://storage.googleapis.com/dart-archive/channels/stable/release/2.18.5/linux_packages/dart_2.18.5-1_amd64.deb
            sudo dpkg -i dart.deb
  install-dart-mac:
    steps:
      - run:
          name: Install Dart
          command: |
            brew tap dart-lang/dart
            brew install dart
  install-protobuf-linux:
    steps:
      - run:
          name: Install protobuf from GitHub
          command: |
            curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v21.11/protoc-21.11-linux-x86_64.zip"
            unzip protoc*.zip -d $HOME/.local
            echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install Flutter plugin
          # Do not use the dart from fvm here for installing protoc_plugin.
          # Else we might get a "Can't load Kernel binary: Invalid kernel binary format version" because the dart
          # versions do not match.
          command: dart pub global activate protoc_plugin
  install-protobuf-mac:
    steps:
      - run:
          name: Install protobuf
          command: |
            curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v21.11/protoc-21.11-osx-x86_64.zip"
            unzip protoc*.zip -d $HOME/.local
            echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install Flutter plugin
          # Use dart directly here. See comment in install-protobuf-linux
          command: dart pub global activate protoc_plugin
  install-fvm:
    steps:
      - run:
          name: Install FVM
          command: |
            dart pub global activate fvm
            echo 'export PATH=$HOME/.pub-cache/bin:$PATH' >> $BASH_ENV
      - restore_cache:
          keys:
            - fvm-0-{{ checksum ".fvm/fvm_config.json" }}-{{ arch }}
      - run:
          name: Install Flutter
          command: fvm install
      - save_cache:
          key: fvm-0-{{ checksum ".fvm/fvm_config.json" }}-{{ arch }}
          paths:
            - .fvm
            - ~/fvm/
      - run:
          name: Show Flutter version
          command: fvm flutter --version
      - run:
          name: Configure Flutter
          command: fvm flutter config --no-analytics

jobs:
  check-frontend:
    docker:
      - image: cimg/node:19.1.0-browsers
    resource_class: small
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - browser-tools/install-chrome
      - install-dart-linux
      - install-fvm
      - install-app-toolbelt
      - install-protobuf-linux
      - run:
          name: Install Flutter Packages
          command: fvm flutter pub get
      - run:
          name: Check Formatting
          command: fvm dart format -l 120 -o none --set-exit-if-changed .
      - run:
          name: Build Runner
          command: |
            # Statically use "bayern" build config for analyzing here
            fvm flutter pub run build_runner build --define "df_build_config=name=bayern"
      - run:
          name: Check Analyzer and Linting
          command: |
            fvm flutter analyze --fatal-infos --fatal-warnings
            fvm flutter analyze pubs/df_build_config --fatal-infos --fatal-warnings
            fvm flutter analyze pubs/df_protobuf --fatal-infos --fatal-warnings
      - run:
          name: Tests
          command: |
            fvm flutter test
            fvm flutter test pubs/df_build_config
            fvm flutter test pubs/df_protobuf

  frontend-android-build:
    docker:
      - image: cimg/android:2022.09.2-node
    parameters:
      buildConfig:
        description: "Name of the build config to use"
        type: string
      flutterFlavor:
        description: "Flutter Flavor to use"
        type: string
    environment:
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m" -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2'
    resource_class: large
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - install-dart-linux
      - install-fvm
      - install-app-toolbelt
      - install-protobuf-linux
      - run:
          name: Install Flutter Packages
          command: |
            fvm flutter pub get
            fvm flutter precache --android
      - run:
          name: Build Runner
          command: |
            fvm flutter pub run build_runner build --define "df_build_config=name=<< parameters.buildConfig >>"
      - run:
          name: Build
          command: |
            fvm flutter build apk --dart-define=environment=production --flavor << parameters.flutterFlavor >> --release -t lib/main.dart
      - store_artifacts:
          path: build/app/outputs/flutter-apk/

  frontend-ios-build:
    macos:
      xcode: 14.0.0
    parameters:
      buildConfig:
        description: "Name of the build config to use"
        type: string
      flutterFlavor:
        description: "Flutter Flavor to use"
        type: string
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - install-dart-mac
      - install-fvm
      - install-app-toolbelt
      - install-protobuf-mac
      - run:
          name: Install Flutter Packages
          command: |
            fvm flutter pub get
            fvm flutter precache --ios
      - run:
          name: Update Pods
          command: |
            cd ios
            pod update # This command is somehow needed: https://github.com/m0nac0/flutter-maplibre-gl/pull/9
            pod install
      - run:
          name: Build Runner
          command: |
            fvm flutter pub run build_runner build --define "df_build_config=name=<< parameters.buildConfig >>"
      - run:
          name: Build
          command: |
            app-toolbelt v0 build-config write-xcconfig "<< parameters.buildConfig >>" ios --directory ios/
            fvm flutter build ios --dart-define=environment=production --flavor << parameters.flutterFlavor >> --no-codesign --release -t lib/main.dart

  backend-build:
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: cimg/openjdk:17.0.6-node
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - run: git submodule sync
      - run: git submodule update --init
      - restore_cache:
          key: v2-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v2-gradle-cache-{{ checksum "build.gradle.kts" }}
      - run:
          name: Check that GraphQL scheme is stable
          command: |
            ./gradlew run --args="graphql-export ../specs/backend-api.graphql"
            git diff --exit-code
      - run:
          name: Test
          command: |
            ./gradlew test
      - run: ./gradlew build
      - save_cache:
          paths:
            - .gradle/wrapper
          key: v2-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - .gradle/caches
          key: v2-gradle-cache-{{ checksum "build.gradle.kts" }}
      - store_artifacts:
          path: build/libs
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend/build/distributions/*

  administration-build:
    docker:
      - image: cimg/node:19.1.0-browsers
    working_directory: ~/project/administration
    steps:
      - checkout:
          path: ~/project
      - browser-tools/install-chrome
      - restore_cache:
          keys:
            - v1-node-modules-{{ checksum "package.json" }}-{{checksum "package-lock.json" }}
      - install-dart-linux
      - install-protobuf-linux
      - run:
          name: Install node dependencies
          command: "[ ! -d node_modules ] && npm ci --loglevel warn --yes || echo package.json and package-lock.json unchanged. Using cache."
      - run: |
          npm run generate-graphql
          npm run generate-protobuf
      - run:
          name: Lint
          command: npm run lint
      - run:
          name: Test
          command: npm run test
      - run:
          name: Build
          command: npm run build
      - save_cache:
          paths:
            - node_modules
          key: v1-node-modules-{{ checksum "package.json" }}-{{checksum "package-lock.json" }}
      - store_artifacts:
          path: build
      - persist_to_workspace:
          root: ~/project
          paths:
            - administration/build

  martin-build:
    docker:
      - image: rust:bullseye
    working_directory: ~/martin
    steps:
      - run:
          name: "Checkout"
          command: |
            mkdir -p ~/.ssh
            touch ~/.ssh/known_hosts
            echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=" >> ~/.ssh/known_hosts
            git clone git@github.com:urbica/martin.git ~/martin
            git config advice.detachedHead false
            git checkout ed14582a8f5c3e11bfb165f3b012edccd929b479
      - restore_cache:
          keys:
            - v1-cargo-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Install OpenSSL"
          command: |
            apt update
            apt install -y openssl libssl-dev
      - run:
          name: "Build"
          command: |
            cargo build --release --target x86_64-unknown-linux-gnu
      - save_cache:
          paths:
            - "~/.cargo"
            - "target"
          key: v1-cargo-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Prepare storing"
          command: |
            mkdir -p /tmp/artifacts/martin
            cp target/x86_64-unknown-linux-gnu/release/martin /tmp/artifacts/martin
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - martin/martin

  backend-pack:
    docker:
      - image: debian:11 # We deploy on debian -> pack on debian
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: /tmp/workspace
      - run: ~/project/scripts/pack_deb.sh -v "0.$CIRCLE_BUILD_NUM" -t /tmp/workspace/backend/build/distributions/*.tar -s ~/project/scripts/eak-backend.service -d "Backend server for the Ehrenamtskarte app" -n "eak-backend" -c "openjdk-17-jre-headless"
      - run: |
          mkdir -p /tmp/artifacts/debs
          mv *.deb /tmp/artifacts/debs
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - debs/*.deb

  backend-health-check:
    docker:
      - image: cimg/base:2023.03
      - image: postgis/postgis:13-3.0-alpine
        environment:
          - POSTGRES_DB=ehrenamtskarte
          - POSTGRES_USER=postgres
          - POSTGRES_PASSWORD=postgres
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Curl
          command: |
            sudo apt update
            sudo apt install curl -y
      - run:
          name: Install openjdk-17-jre-headless
          command: sudo apt install openjdk-17-jre-headless -y
      - run:
          name: Install backend
          command: sudo dpkg -i /tmp/workspace/debs/eak-backend*.deb
      - run:
          name: Run migrate
          command: /opt/ehrenamtskarte/backend/bin/backend migrate
      - run:
          name: Start backend
          command: /opt/ehrenamtskarte/backend/bin/backend execute
          background: true
      - run:
          name: Check health
          command: curl --retry 120 --retry-delay 1 --retry-all-errors http://0.0.0.0:8000/health

  administration-pack:
    docker:
      - image: debian:11 # We deploy on debian -> pack on debian
    working_directory: ~/project/administration
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: /tmp/workspace
      - run: ~/project/scripts/pack_deb.sh -v "0.$CIRCLE_BUILD_NUM" -f /tmp/workspace/administration/build -d "Administration backend for the Ehrenamtskarte app" -n "eak-administration"
      - run: |
          mkdir -p /tmp/artifacts/debs
          mv *.deb /tmp/artifacts/debs
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - debs/*.deb

  martin-pack:
    docker:
      - image: debian:11 # We deploy on debian -> pack on debian
    working_directory: ~/project/map-tiles/martin
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Build .deb"
          command: |
            cp ~/project/docker/martin-config.yaml config.yaml
            cp /tmp/workspace/martin/martin .
            ~/project/scripts/pack_deb.sh -v "0.$CIRCLE_BUILD_NUM" -d "Martin tile server for the Ehrenamtskarte app" -n "eak-martin" -s ~/project/scripts/eak-martin.service -C "/opt/ehrenamtskarte/martin/config.yaml" -M .
      - run:
          name: "Move .deb to artifacts folder"
          command: |
            mkdir -p /tmp/artifacts/debs
            mv *.deb /tmp/artifacts/debs
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - debs/*.deb

  meta-pack:
    docker:
      - image: debian:11 # We deploy on debian -> pack on debian
    working_directory: ~/project/administration
    steps:
      - checkout:
          path: ~/project
      - run: ~/project/scripts/pack_deb.sh -v "0.$CIRCLE_BUILD_NUM" -d "Meta package for the Ehrenamtskarte app" -n "eak" -c "eak-backend, eak-administration, eak-martin"
      - run: |
          mkdir -p /tmp/artifacts/debs
          cp *.deb /tmp/artifacts/debs
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - debs/*.deb

  deploy:
    docker:
      - image: cimg/base:2022.09
    parameters:
        server:
            enum:
              - entitlementcard.app
              - staging.entitlementcard.app
            type: enum
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - "a1:3f:a7:c3:ff:12:40:1d:85:de:a7:ab:12:3f:cc:05"
      - run:
          name: "SFTP upload"
          command: |
            Server fingerprint: $APT_HOST_FINGERPRINT
            echo $APT_HOST_FINGERPRINT > known_hosts
            echo "Uploading: " /tmp/workspace/debs/*.deb
            sftp -b - -o UserKnownHostsFile=known_hosts ci@apt.<< parameters.server >>:/local-apt-repository/ \<<< "put -r /tmp/workspace/debs/*.deb"