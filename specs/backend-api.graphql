schema {
  query: Query
  mutation: Mutation
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type AcceptingStore {
  category: Category!
  categoryId: Int!
  contact: Contact!
  contactId: Int!
  description: String
  id: Int!
  name: String
  physicalStore: PhysicalStore
}

type Address {
  id: Int!
  location: String
  postalCode: String
  state: String
  street: String
}

type Administrator {
  email: String!
  id: Int!
  regionId: Int
  role: Role!
}

type ApplicationView {
  createdDate: String!
  id: Int!
  jsonValue: String!
  regionId: Int!
}

type Category {
  id: Int!
  name: String!
}

type Contact {
  email: String
  id: Int!
  telephone: String
  website: String
}

type Coordinates {
  lat: Float!
  lng: Float!
}

type Mutation {
  "Stores a new blue digital EAK"
  addBlueEakApplication(application: BlueCardApplicationInput!, regionId: Int!): Boolean!
  "Stores a new digital EAK"
  addCard(card: CardGenerationModelInput!): Boolean!
  "Stores a new golden digital EAK"
  addGoldenEakApplication(application: GoldenCardApplicationInput!, regionId: Int!): Boolean!
  "Changes an administrator's password"
  changePassword(currentPassword: String!, email: String!, newPassword: String!, project: String!): Boolean!
  "Deletes the application with specified id"
  deleteApplication(applicationId: Int!): Boolean!
  "Reset the administrator's password"
  resetPassword(email: String!, newPassword: String!, passwordResetKey: String!, project: String!): Boolean!
  "Sends a mail that allows the administrator to reset their password."
  sendResetMail(email: String!, project: String!): Boolean!
  "Signs in an administrator"
  signIn(authData: AuthDataInput!, project: String!): SignInPayload!
}

type PhysicalStore {
  address: Address!
  addressId: Int!
  coordinates: Coordinates!
  id: Int!
  store: AcceptingStore!
  storeId: Int!
}

type Query {
  "Return list of all categories."
  categories: [Category!]!
  "Queries all applications for a specific region"
  getApplications(regionId: Int!): [ApplicationView!]!
  "Returns list of all accepting stores in the given project queried by ids."
  physicalStoresByIdInProject(ids: [Int!]!, project: String!): [PhysicalStore]!
  "Returns list of all accepting stores in the given project."
  physicalStoresInProject(project: String!): [PhysicalStore!]!
  "Returns regions queried by ids in the given project."
  regionsByIdInProject(ids: [Int!]!, project: String!): [Region]!
  "Return list of all regions in the given project."
  regionsInProject(project: String!): [Region!]!
  "Search for accepting stores in the given project using searchText and categoryIds."
  searchAcceptingStoresInProject(params: SearchParamsInput!, project: String!): [AcceptingStore!]!
  "Returns whether there is a card in the given project with that hash registered for that this TOTP is currently valid"
  verifyCardInProject(card: CardVerificationModelInput!, project: String!): Boolean!
}

type Region {
  id: Int!
  name: String!
  prefix: String!
  regionIdentifier: String
}

type SignInPayload {
  token: String!
  user: Administrator!
}

enum AmountOfWorkUnit {
  HOURS_PER_WEEK
  HOURS_PER_YEAR
}

enum ApplicationType {
  FIRST_APPLICATION
  RENEWAL_APPLICATION
}

enum BlueCardEntitlementType {
  JULEICA
  SERVICE
  STANDARD
}

enum GoldenCardEntitlementType {
  HONOR_BY_MINISTER_PRESIDENT
  SERVICE_AWARD
  STANDARD
}

enum Role {
  NO_RIGHTS
  PROJECT_ADMIN
  REGION_ADMIN
  REGION_MANAGER
}

"A 64-bit signed integer"
scalar Long

"A file part in a multipart request"
scalar Upload

input AddressInput {
  addressSupplement: ShortTextInput
  houseNumber: ShortTextInput!
  location: ShortTextInput!
  postalCode: ShortTextInput!
  street: ShortTextInput!
}

input AttachmentInput {
  data: Upload!
}

input AuthDataInput {
  email: String!
  password: String!
}

input BlueCardApplicationInput {
  applicationType: ApplicationType!
  entitlement: BlueCardEntitlementInput!
  givenInformationIsCorrectAndComplete: Boolean!
  hasAcceptedPrivacyPolicy: Boolean!
  personalData: PersonalDataInput!
}

"""
Entitlement for blue EAK.
    Either entitlementType == Juleica and juleicaNumber, juleicaExpirationDate, copyOfJuleica are not null
    or     entitlementType == Service and serviceActivity, serviceCertification are not null
    or     entitlementType == Standard and workAtOrganizations is not null
"""
input BlueCardEntitlementInput {
  copyOfJuleica: AttachmentInput
  entitlementType: BlueCardEntitlementType!
  juleicaExpirationDate: String
  juleicaNumber: String
  serviceEntitlement: BlueCardServiceEntitlementInput
  workAtOrganizations: [WorkAtOrganizationInput!]
}

input BlueCardServiceEntitlementInput {
  certificate: AttachmentInput
  organization: OrganizationInput!
  responsibility: String
}

input CardGenerationModelInput {
  cardDetailsHashBase64: String!
  cardExpirationDay: Int!
  regionId: Int!
  totpSecretBase64: String!
}

input CardVerificationModelInput {
  cardDetailsHashBase64: String!
  totp: Int!
}

input CoordinatesInput {
  lat: Float!
  lng: Float!
}

"A local date in the format yyyy-MM-dd"
input DateInput {
  date: String!
}

"An email address with at most 300 characters"
input EmailInput {
  email: String!
}

input GoldenCardApplicationInput {
  entitlement: GoldenCardEntitlementInput!
  givenInformationIsCorrectAndComplete: Boolean!
  hasAcceptedPrivacyPolicy: Boolean!
  personalData: PersonalDataInput!
}

input GoldenCardEntitlementInput {
  certificate: AttachmentInput
  goldenEntitlementType: GoldenCardEntitlementType!
  workAtOrganizations: [WorkAtOrganizationInput!]
}

input OrganizationContactInput {
  email: EmailInput!
  hasGivenPermission: Boolean!
  name: ShortTextInput!
  telephone: ShortTextInput!
}

input OrganizationInput {
  address: AddressInput!
  category: ShortTextInput!
  contact: OrganizationContactInput!
  name: ShortTextInput!
  "Link zu Website oder Satzung"
  website: ShortTextInput
}

input PersonalDataInput {
  address: AddressInput!
  dateOfBirth: DateInput!
  emailAddress: EmailInput!
  forenames: ShortTextInput!
  gender: ShortTextInput
  nationality: ShortTextInput
  surname: ShortTextInput!
  telephone: ShortTextInput
  title: ShortTextInput
}

input SearchParamsInput {
  categoryIds: [Int!]
  coordinates: CoordinatesInput
  limit: Int
  offset: Long
  searchText: String
}

"A String wrapper that expects a non-empty string with at most 300 characters"
input ShortTextInput {
  shortText: String!
}

input WorkAtOrganizationInput {
  amountOfWork: Float!
  amountOfWorkUnit: AmountOfWorkUnit!
  certificate: AttachmentInput
  organization: OrganizationInput!
  payment: Boolean!
  responsibility: ShortTextInput!
  workSinceDate: DateInput!
}
