schema {
  query: Query
  mutation: Mutation
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type AcceptingStore {
  category: Category!
  categoryId: Int!
  contact: Contact!
  contactId: Int!
  description: String
  id: Int!
  name: String
  physicalStore: PhysicalStore
}

type Address {
  id: Int!
  location: String
  postalCode: String
  state: String
  street: String
}

type Administrator {
  email: String!
  id: Int!
  region: Region
  regionId: Int
  role: Role!
}

type ApplicationView {
  createdDate: String!
  id: Int!
  jsonValue: String!
  regionId: Int!
}

type Category {
  id: Int!
  name: String!
}

type Contact {
  email: String
  id: Int!
  telephone: String
  website: String
}

type Coordinates {
  lat: Float!
  lng: Float!
}

type Mutation {
  "Stores a new digital EAK"
  addCard(card: CardGenerationModelInput!): Boolean!
  "Stores a new application for an EAK"
  addEakApplication(application: ApplicationInput!, regionId: Int!): Boolean!
  "Changes an administrator's password"
  changePassword(currentPassword: String!, email: String!, newPassword: String!, project: String!): Boolean!
  "Creates a new administrator"
  createAdministrator(email: String!, project: String!, regionId: Int, role: Role!, sendWelcomeMail: Boolean!): Boolean!
  "Deletes an existing administrator"
  deleteAdministrator(adminId: Int!, project: String!): Boolean!
  "Deletes the application with specified id"
  deleteApplication(applicationId: Int!): Boolean!
  "Edits an existing administrator"
  editAdministrator(adminId: Int!, newEmail: String!, newRegionId: Int, newRole: Role!, project: String!): Boolean!
  "Reset the administrator's password"
  resetPassword(email: String!, newPassword: String!, passwordResetKey: String!, project: String!): Boolean!
  "Sends a mail that allows the administrator to reset their password."
  sendResetMail(email: String!, project: String!): Boolean!
  "Signs in an administrator"
  signIn(authData: AuthDataInput!, project: String!): SignInPayload!
  "Updates the data privacy policy of a region"
  updateDataPrivacy(dataPrivacyText: String!, regionId: Int!): Boolean!
}

type PhysicalStore {
  address: Address!
  addressId: Int!
  coordinates: Coordinates!
  id: Int!
  store: AcceptingStore!
  storeId: Int!
}

type Query {
  "Return list of all categories."
  categories: [Category!]!
  "Queries all applications for a specific region"
  getApplications(regionId: Int!): [ApplicationView!]!
  "Returns all administrators in a project. This query requires the role PROJECT_ADMIN."
  getUsersInProject(project: String!): [Administrator!]!
  "Returns all administrators in a region. This query requires the role REGION_ADMIN or PROJECT_ADMIN."
  getUsersInRegion(regionId: Int!): [Administrator!]!
  "Returns list of all accepting stores in the given project queried by ids."
  physicalStoresByIdInProject(ids: [Int!]!, project: String!): [PhysicalStore]!
  "Returns list of all accepting stores in the given project."
  physicalStoresInProject(project: String!): [PhysicalStore!]!
  "Returns region data for specific region."
  regionByRegionId(regionId: Int!): Region!
  "Returns regions queried by ids in the given project."
  regionsByIdInProject(ids: [Int!]!, project: String!): [Region]!
  "Return list of all regions in the given project."
  regionsInProject(project: String!): [Region!]!
  "Search for accepting stores in the given project using searchText and categoryIds."
  searchAcceptingStoresInProject(params: SearchParamsInput!, project: String!): [AcceptingStore!]!
  "Returns whether there is a card in the given project with that hash registered for that this TOTP is currently valid"
  verifyCardInProject(card: CardVerificationModelInput!, project: String!): Boolean!
  "Returns the requesting administrator as retrieved from his JWT token."
  whoAmI(project: String!): Administrator!
}

type Region {
  dataPrivacyPolicy: String
  id: Int!
  name: String!
  prefix: String!
  regionIdentifier: String
}

type SignInPayload {
  token: String!
}

enum ApplicationType {
  FIRST_APPLICATION
  RENEWAL_APPLICATION
}

enum BavariaCardType {
  BLUE
  GOLDEN
}

enum BlueCardEntitlementType {
  JULEICA
  MILITARY_RESERVE
  VOLUNTEER_SERVICE
  WORK_AT_DEPARTMENT
  WORK_AT_ORGANIZATIONS
}

enum CodeType {
  dynamic
  static
}

enum GoldenCardEntitlementType {
  HONORED_BY_MINISTER_PRESIDENT
  MILITARY_RESERVE
  WORK_AT_DEPARTMENT
  WORK_AT_ORGANIZATIONS
}

enum Role {
  NO_RIGHTS
  PROJECT_ADMIN
  REGION_ADMIN
  REGION_MANAGER
}

"A 64-bit signed integer"
scalar Long

"A file part in a multipart request"
scalar Upload

input AddressInput {
  addressSupplement: ShortTextInput
  houseNumber: ShortTextInput!
  location: ShortTextInput!
  postalCode: ShortTextInput!
  street: ShortTextInput!
}

"""
An application for the Bayerische Ehrenamtskarte.
The field `cardType` specifies whether `blueCardEntitlement` or `goldenCardEntitlement` must be present/null.
"""
input ApplicationInput {
  applicationType: ApplicationType!
  blueCardEntitlement: BlueCardEntitlementInput
  cardType: BavariaCardType!
  givenInformationIsCorrectAndComplete: Boolean!
  goldenCardEntitlement: GoldenCardEntitlementInput
  hasAcceptedPrivacyPolicy: Boolean!
  personalData: PersonalDataInput!
  wantsDigitalCard: Boolean!
}

input AttachmentInput {
  data: Upload!
}

input AuthDataInput {
  email: String!
  password: String!
}

"Entitlement for a blue EAK. The field selected by entitlementType must not be null; all others must be null."
input BlueCardEntitlementInput {
  entitlementType: BlueCardEntitlementType!
  juleicaEntitlement: BlueCardJuleicaEntitlementInput
  militaryReserveEntitlement: BlueCardMilitaryReserveEntitlementInput
  volunteerServiceEntitlement: BlueCardVolunteerServiceEntitlementInput
  workAtDepartmentEntitlement: BlueCardWorkAtDepartmentEntitlementInput
  workAtOrganizationsEntitlement: BlueCardWorkAtOrganizationsEntitlementInput
}

input BlueCardJuleicaEntitlementInput {
  copyOfJuleica: AttachmentInput!
  juleicaExpirationDate: DateInput!
  juleicaNumber: ShortTextInput!
}

input BlueCardMilitaryReserveEntitlementInput {
  certificate: AttachmentInput!
}

input BlueCardVolunteerServiceEntitlementInput {
  certificate: AttachmentInput!
  programName: ShortTextInput!
}

input BlueCardWorkAtDepartmentEntitlementInput {
  certificate: AttachmentInput!
  organization: OrganizationInput!
  responsibility: ShortTextInput!
}

input BlueCardWorkAtOrganizationsEntitlementInput {
  list: [WorkAtOrganizationInput!]!
}

input CardGenerationModelInput {
  cardExpirationDay: Long
  cardInfoHashBase64: String!
  codeType: CodeType!
  regionId: Int!
  totpSecretBase64: String
}

input CardVerificationModelInput {
  cardInfoHashBase64: String!
  codeType: CodeType!
  totp: Int
}

input CoordinatesInput {
  lat: Float!
  lng: Float!
}

"A local date in the format yyyy-MM-dd"
input DateInput {
  date: String!
}

"An email address with at most 300 characters"
input EmailInput {
  email: String!
}

"Entitlement for a golden EAK. The field selected by entitlementType must not be null; all others must be null."
input GoldenCardEntitlementInput {
  entitlementType: GoldenCardEntitlementType!
  honoredByMinisterPresidentEntitlement: GoldenCardHonoredByMinisterPresidentEntitlementInput
  militaryReserveEntitlement: GoldenCardMilitaryReserveEntitlementInput
  workAtDepartmentEntitlement: GoldenCardWorkAtDepartmentEntitlementInput
  workAtOrganizationsEntitlement: GoldenCardWorkAtOrganizationsEntitlementInput
}

input GoldenCardHonoredByMinisterPresidentEntitlementInput {
  certificate: AttachmentInput!
}

input GoldenCardMilitaryReserveEntitlementInput {
  certificate: AttachmentInput!
}

input GoldenCardWorkAtDepartmentEntitlementInput {
  certificate: AttachmentInput!
  organization: OrganizationInput!
  responsibility: ShortTextInput!
}

input GoldenCardWorkAtOrganizationsEntitlementInput {
  list: [WorkAtOrganizationInput!]!
}

input OrganizationContactInput {
  email: EmailInput!
  hasGivenPermission: Boolean!
  name: ShortTextInput!
  telephone: ShortTextInput!
}

input OrganizationInput {
  address: AddressInput!
  category: ShortTextInput!
  contact: OrganizationContactInput!
  name: ShortTextInput!
}

input PersonalDataInput {
  address: AddressInput!
  dateOfBirth: DateInput!
  emailAddress: EmailInput!
  forenames: ShortTextInput!
  surname: ShortTextInput!
  telephone: ShortTextInput!
}

input SearchParamsInput {
  categoryIds: [Int!]
  coordinates: CoordinatesInput
  limit: Int
  offset: Long
  searchText: String
}

"A String wrapper that expects a non-empty string with at most 300 characters"
input ShortTextInput {
  shortText: String!
}

input WorkAtOrganizationInput {
  amountOfWork: Float!
  certificate: AttachmentInput!
  organization: OrganizationInput!
  payment: Boolean!
  responsibility: ShortTextInput!
  workSinceDate: DateInput!
}
