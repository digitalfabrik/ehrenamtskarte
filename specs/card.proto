syntax = "proto3";

message RegionExtension {
  // Using int32 instead of uint32, even though we do not expect negative values.
  // The reason is that int32 are better supported in GraphQL and SQL.
  optional int32 regionId = 1;
}

message BirthdayExtension {
  // Days since the birthday (calculated from 1970-01-01).
  // All values of this field are valid, including the 0, which indicates that the birthday is on 1970-01-01.
  // We choose sint32 here, as it encodes negative numbers more efficiently: For birthdays between 1900 and 2050, the
  // BirthdayExtension message takes up to 4 bytes when encoded binary, whereas using int32 would require up to 11 bytes
  // for birthdays before 1970 and up to 4 bytes for birthdays between 1970 and 2050.
  // If you want to specify that the card does not have an associated birthdate, then do not set the BirthdayExtension.
  optional sint32 birthday = 1;
}

message NuernbergPassNumberExtension {
  optional uint32 pass_number = 1;
}

message NuernbergIdExtension {
  optional uint64 pass_id = 1;
}

enum BavariaCardType {
  STANDARD = 0;
  GOLD = 1;
}

message BavariaCardTypeExtension {
  optional BavariaCardType card_type = 1;
}

message CardExtensions {
  optional RegionExtension extension_region = 1;
  optional BirthdayExtension extension_birthday = 2;
  optional NuernbergPassNumberExtension extension_nuernberg_pass_number = 3;
  optional BavariaCardTypeExtension extension_bavaria_card_type = 4;
  optional NuernbergIdExtension extension_nuernberg_pass_id = 5;
}

// For our hashing approach, we require that all fields (and subfields, recursively) of CardInfo are marked 'optional'.
// Note that, 'optional' in proto3 "only" means explicit presence, i.e. it can be determined if a field marked
// as optional is actually present in an instance of a proto. Asserting that all fields have explicit presence
// enables us to add and remove fields from the proto in the future without making changes to our hashing algorithm
// (and thus without having to keep track of different versions of the algorithm).
// More notes on explicit presence: https://protobuf.dev/programming-guides/field_presence/#presence-in-proto3-apis
message CardInfo {
  // The first and last name of the cardholder.
  optional string full_name = 1;

  // Expiration day (calculated from 1970-01-01).
  // Cards are always invalid on 1970-01-01 (because day = 0 is excluded).
  // The calculated day is inclusive (e.g. if day == 1, then the card is valid on 1970-01-02, but not on 1970-01-03).
  // Because the data type is unsigned, there are no dates before 1970-01-01.
  // 2^32days = 11 759 230.8 years.
  // Absent, if the card does not expire (in the case of a golden Bavarian EAK).
  optional uint32 expiration_day = 2;

  // Extensions
  optional CardExtensions extensions = 3;
}

message QrCode {
  oneof qr_code {
    DynamicActivationCode dynamic_activation_code = 1;
    DynamicVerificationCode dynamic_verification_code = 2;
    StaticVerificationCode static_verification_code = 3;
  }
}

message DynamicActivationCode {
  CardInfo info = 1;
  bytes pepper = 2;
  bytes activation_secret = 3;
  bytes ec_signature = 4;
}

message DynamicUserCode {
  CardInfo info = 1;
  bytes pepper = 2;
  bytes totp_secret = 3;
  bytes ec_signature = 4;
}

message DynamicVerificationCode {
  CardInfo info = 1;
  bytes pepper = 2;
  uint32 otp = 3;
}

message StaticVerificationCode {
  CardInfo info = 1;
  bytes pepper = 2;
  bytes ec_signature = 3;
}
